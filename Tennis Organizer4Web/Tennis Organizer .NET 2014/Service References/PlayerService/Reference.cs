//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tennis_Organizer.NET_2014.PlayerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PlayerService.IPlayerService")]
    public interface IPlayerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/AddPlayer", ReplyAction="http://tempuri.org/IPlayerService/AddPlayerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        void AddPlayer(TennisOrganizerServices.Player newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/AddPlayer", ReplyAction="http://tempuri.org/IPlayerService/AddPlayerResponse")]
        System.Threading.Tasks.Task AddPlayerAsync(TennisOrganizerServices.Player newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/Update", ReplyAction="http://tempuri.org/IPlayerService/UpdateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        void Update(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/Update", ReplyAction="http://tempuri.org/IPlayerService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/CanPlay", ReplyAction="http://tempuri.org/IPlayerService/CanPlayResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        bool CanPlay(TennisOrganizerServices.Player player, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/CanPlay", ReplyAction="http://tempuri.org/IPlayerService/CanPlayResponse")]
        System.Threading.Tasks.Task<bool> CanPlayAsync(TennisOrganizerServices.Player player, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetPlayerByID", ReplyAction="http://tempuri.org/IPlayerService/GetPlayerByIDResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        TennisOrganizerServices.Player GetPlayerByID(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetPlayerByID", ReplyAction="http://tempuri.org/IPlayerService/GetPlayerByIDResponse")]
        System.Threading.Tasks.Task<TennisOrganizerServices.Player> GetPlayerByIDAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetAcceptedNotSeenDuels", ReplyAction="http://tempuri.org/IPlayerService/GetAcceptedNotSeenDuelsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel> GetAcceptedNotSeenDuels(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetAcceptedNotSeenDuels", ReplyAction="http://tempuri.org/IPlayerService/GetAcceptedNotSeenDuelsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel>> GetAcceptedNotSeenDuelsAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetRejectedNotSeenDuels", ReplyAction="http://tempuri.org/IPlayerService/GetRejectedNotSeenDuelsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel> GetRejectedNotSeenDuels(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetRejectedNotSeenDuels", ReplyAction="http://tempuri.org/IPlayerService/GetRejectedNotSeenDuelsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel>> GetRejectedNotSeenDuelsAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetFinishedNotRatedDuels", ReplyAction="http://tempuri.org/IPlayerService/GetFinishedNotRatedDuelsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel> GetFinishedNotRatedDuels(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetFinishedNotRatedDuels", ReplyAction="http://tempuri.org/IPlayerService/GetFinishedNotRatedDuelsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel>> GetFinishedNotRatedDuelsAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetChallengingDuels", ReplyAction="http://tempuri.org/IPlayerService/GetChallengingDuelsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel> GetChallengingDuels(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetChallengingDuels", ReplyAction="http://tempuri.org/IPlayerService/GetChallengingDuelsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel>> GetChallengingDuelsAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetOpponentBy", ReplyAction="http://tempuri.org/IPlayerService/GetOpponentByResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        TennisOrganizerServices.Player GetOpponentBy(TennisOrganizerServices.Player player, int duelID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetOpponentBy", ReplyAction="http://tempuri.org/IPlayerService/GetOpponentByResponse")]
        System.Threading.Tasks.Task<TennisOrganizerServices.Player> GetOpponentByAsync(TennisOrganizerServices.Player player, int duelID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetOpponentsBy", ReplyAction="http://tempuri.org/IPlayerService/GetOpponentsByResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player> GetOpponentsBy(TennisOrganizerServices.Player player, System.DateTime gameTime, int ageFrom, int ageTo, float levelFrom, float levelTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetOpponentsBy", ReplyAction="http://tempuri.org/IPlayerService/GetOpponentsByResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player>> GetOpponentsByAsync(TennisOrganizerServices.Player player, System.DateTime gameTime, int ageFrom, int ageTo, float levelFrom, float levelTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetOpponentsByCity", ReplyAction="http://tempuri.org/IPlayerService/GetOpponentsByCityResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player> GetOpponentsByCity(TennisOrganizerServices.Player player, System.DateTime gameTime, int ageFrom, int ageTo, float levelFrom, float levelTo, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetOpponentsByCity", ReplyAction="http://tempuri.org/IPlayerService/GetOpponentsByCityResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player>> GetOpponentsByCityAsync(TennisOrganizerServices.Player player, System.DateTime gameTime, int ageFrom, int ageTo, float levelFrom, float levelTo, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetTrainers", ReplyAction="http://tempuri.org/IPlayerService/GetTrainersResponse")]
        System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player> GetTrainers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetTrainers", ReplyAction="http://tempuri.org/IPlayerService/GetTrainersResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player>> GetTrainersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetPlayerStatsList", ReplyAction="http://tempuri.org/IPlayerService/GetPlayerStatsListResponse")]
        System.Collections.ObjectModel.Collection<TennisOrganizerServices.PlayerStats> GetPlayerStatsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetPlayerStatsList", ReplyAction="http://tempuri.org/IPlayerService/GetPlayerStatsListResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.PlayerStats>> GetPlayerStatsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetCalendar", ReplyAction="http://tempuri.org/IPlayerService/GetCalendarResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        System.Collections.ObjectModel.Collection<TennisOrganizerServices.DuelHistory> GetCalendar(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetCalendar", ReplyAction="http://tempuri.org/IPlayerService/GetCalendarResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.DuelHistory>> GetCalendarAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetHistoryOfDuels", ReplyAction="http://tempuri.org/IPlayerService/GetHistoryOfDuelsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        System.Collections.ObjectModel.Collection<TennisOrganizerServices.DuelHistory> GetHistoryOfDuels(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetHistoryOfDuels", ReplyAction="http://tempuri.org/IPlayerService/GetHistoryOfDuelsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.DuelHistory>> GetHistoryOfDuelsAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetMatchesCount", ReplyAction="http://tempuri.org/IPlayerService/GetMatchesCountResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        int GetMatchesCount(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetMatchesCount", ReplyAction="http://tempuri.org/IPlayerService/GetMatchesCountResponse")]
        System.Threading.Tasks.Task<int> GetMatchesCountAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetMonthlyMatchesCount", ReplyAction="http://tempuri.org/IPlayerService/GetMonthlyMatchesCountResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        int GetMonthlyMatchesCount(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetMonthlyMatchesCount", ReplyAction="http://tempuri.org/IPlayerService/GetMonthlyMatchesCountResponse")]
        System.Threading.Tasks.Task<int> GetMonthlyMatchesCountAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetRank", ReplyAction="http://tempuri.org/IPlayerService/GetRankResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        int GetRank(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetRank", ReplyAction="http://tempuri.org/IPlayerService/GetRankResponse")]
        System.Threading.Tasks.Task<int> GetRankAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetTopPosition", ReplyAction="http://tempuri.org/IPlayerService/GetTopPositionResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        int GetTopPosition(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetTopPosition", ReplyAction="http://tempuri.org/IPlayerService/GetTopPositionResponse")]
        System.Threading.Tasks.Task<int> GetTopPositionAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetSkillLevel", ReplyAction="http://tempuri.org/IPlayerService/GetSkillLevelResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        float GetSkillLevel(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetSkillLevel", ReplyAction="http://tempuri.org/IPlayerService/GetSkillLevelResponse")]
        System.Threading.Tasks.Task<float> GetSkillLevelAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetLastMatchDate", ReplyAction="http://tempuri.org/IPlayerService/GetLastMatchDateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        System.Nullable<System.DateTime> GetLastMatchDate(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetLastMatchDate", ReplyAction="http://tempuri.org/IPlayerService/GetLastMatchDateResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.DateTime>> GetLastMatchDateAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetWonMatchesCount", ReplyAction="http://tempuri.org/IPlayerService/GetWonMatchesCountResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        int GetWonMatchesCount(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetWonMatchesCount", ReplyAction="http://tempuri.org/IPlayerService/GetWonMatchesCountResponse")]
        System.Threading.Tasks.Task<int> GetWonMatchesCountAsync(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetLostMatchesCount", ReplyAction="http://tempuri.org/IPlayerService/GetLostMatchesCountResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TennisOrganizerServices.Trainer))]
        int GetLostMatchesCount(TennisOrganizerServices.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetLostMatchesCount", ReplyAction="http://tempuri.org/IPlayerService/GetLostMatchesCountResponse")]
        System.Threading.Tasks.Task<int> GetLostMatchesCountAsync(TennisOrganizerServices.Player player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServiceChannel : Tennis_Organizer.NET_2014.PlayerService.IPlayerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerServiceClient : System.ServiceModel.ClientBase<Tennis_Organizer.NET_2014.PlayerService.IPlayerService>, Tennis_Organizer.NET_2014.PlayerService.IPlayerService {
        
        public PlayerServiceClient() {
        }
        
        public PlayerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddPlayer(TennisOrganizerServices.Player newPlayer) {
            base.Channel.AddPlayer(newPlayer);
        }
        
        public System.Threading.Tasks.Task AddPlayerAsync(TennisOrganizerServices.Player newPlayer) {
            return base.Channel.AddPlayerAsync(newPlayer);
        }
        
        public void Update(TennisOrganizerServices.Player player) {
            base.Channel.Update(player);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(TennisOrganizerServices.Player player) {
            return base.Channel.UpdateAsync(player);
        }
        
        public bool CanPlay(TennisOrganizerServices.Player player, System.DateTime date) {
            return base.Channel.CanPlay(player, date);
        }
        
        public System.Threading.Tasks.Task<bool> CanPlayAsync(TennisOrganizerServices.Player player, System.DateTime date) {
            return base.Channel.CanPlayAsync(player, date);
        }
        
        public TennisOrganizerServices.Player GetPlayerByID(int accountID) {
            return base.Channel.GetPlayerByID(accountID);
        }
        
        public System.Threading.Tasks.Task<TennisOrganizerServices.Player> GetPlayerByIDAsync(int accountID) {
            return base.Channel.GetPlayerByIDAsync(accountID);
        }
        
        public System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel> GetAcceptedNotSeenDuels(TennisOrganizerServices.Player player) {
            return base.Channel.GetAcceptedNotSeenDuels(player);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel>> GetAcceptedNotSeenDuelsAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetAcceptedNotSeenDuelsAsync(player);
        }
        
        public System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel> GetRejectedNotSeenDuels(TennisOrganizerServices.Player player) {
            return base.Channel.GetRejectedNotSeenDuels(player);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel>> GetRejectedNotSeenDuelsAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetRejectedNotSeenDuelsAsync(player);
        }
        
        public System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel> GetFinishedNotRatedDuels(TennisOrganizerServices.Player player) {
            return base.Channel.GetFinishedNotRatedDuels(player);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel>> GetFinishedNotRatedDuelsAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetFinishedNotRatedDuelsAsync(player);
        }
        
        public System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel> GetChallengingDuels(TennisOrganizerServices.Player player) {
            return base.Channel.GetChallengingDuels(player);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Duel>> GetChallengingDuelsAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetChallengingDuelsAsync(player);
        }
        
        public TennisOrganizerServices.Player GetOpponentBy(TennisOrganizerServices.Player player, int duelID) {
            return base.Channel.GetOpponentBy(player, duelID);
        }
        
        public System.Threading.Tasks.Task<TennisOrganizerServices.Player> GetOpponentByAsync(TennisOrganizerServices.Player player, int duelID) {
            return base.Channel.GetOpponentByAsync(player, duelID);
        }
        
        public System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player> GetOpponentsBy(TennisOrganizerServices.Player player, System.DateTime gameTime, int ageFrom, int ageTo, float levelFrom, float levelTo) {
            return base.Channel.GetOpponentsBy(player, gameTime, ageFrom, ageTo, levelFrom, levelTo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player>> GetOpponentsByAsync(TennisOrganizerServices.Player player, System.DateTime gameTime, int ageFrom, int ageTo, float levelFrom, float levelTo) {
            return base.Channel.GetOpponentsByAsync(player, gameTime, ageFrom, ageTo, levelFrom, levelTo);
        }
        
        public System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player> GetOpponentsByCity(TennisOrganizerServices.Player player, System.DateTime gameTime, int ageFrom, int ageTo, float levelFrom, float levelTo, string city) {
            return base.Channel.GetOpponentsByCity(player, gameTime, ageFrom, ageTo, levelFrom, levelTo, city);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player>> GetOpponentsByCityAsync(TennisOrganizerServices.Player player, System.DateTime gameTime, int ageFrom, int ageTo, float levelFrom, float levelTo, string city) {
            return base.Channel.GetOpponentsByCityAsync(player, gameTime, ageFrom, ageTo, levelFrom, levelTo, city);
        }
        
        public System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player> GetTrainers() {
            return base.Channel.GetTrainers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.Player>> GetTrainersAsync() {
            return base.Channel.GetTrainersAsync();
        }
        
        public System.Collections.ObjectModel.Collection<TennisOrganizerServices.PlayerStats> GetPlayerStatsList() {
            return base.Channel.GetPlayerStatsList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.PlayerStats>> GetPlayerStatsListAsync() {
            return base.Channel.GetPlayerStatsListAsync();
        }
        
        public System.Collections.ObjectModel.Collection<TennisOrganizerServices.DuelHistory> GetCalendar(TennisOrganizerServices.Player player) {
            return base.Channel.GetCalendar(player);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.DuelHistory>> GetCalendarAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetCalendarAsync(player);
        }
        
        public System.Collections.ObjectModel.Collection<TennisOrganizerServices.DuelHistory> GetHistoryOfDuels(TennisOrganizerServices.Player player) {
            return base.Channel.GetHistoryOfDuels(player);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.Collection<TennisOrganizerServices.DuelHistory>> GetHistoryOfDuelsAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetHistoryOfDuelsAsync(player);
        }
        
        public int GetMatchesCount(TennisOrganizerServices.Player player) {
            return base.Channel.GetMatchesCount(player);
        }
        
        public System.Threading.Tasks.Task<int> GetMatchesCountAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetMatchesCountAsync(player);
        }
        
        public int GetMonthlyMatchesCount(TennisOrganizerServices.Player player) {
            return base.Channel.GetMonthlyMatchesCount(player);
        }
        
        public System.Threading.Tasks.Task<int> GetMonthlyMatchesCountAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetMonthlyMatchesCountAsync(player);
        }
        
        public int GetRank(TennisOrganizerServices.Player player) {
            return base.Channel.GetRank(player);
        }
        
        public System.Threading.Tasks.Task<int> GetRankAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetRankAsync(player);
        }
        
        public int GetTopPosition(TennisOrganizerServices.Player player) {
            return base.Channel.GetTopPosition(player);
        }
        
        public System.Threading.Tasks.Task<int> GetTopPositionAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetTopPositionAsync(player);
        }
        
        public float GetSkillLevel(TennisOrganizerServices.Player player) {
            return base.Channel.GetSkillLevel(player);
        }
        
        public System.Threading.Tasks.Task<float> GetSkillLevelAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetSkillLevelAsync(player);
        }
        
        public System.Nullable<System.DateTime> GetLastMatchDate(TennisOrganizerServices.Player player) {
            return base.Channel.GetLastMatchDate(player);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.DateTime>> GetLastMatchDateAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetLastMatchDateAsync(player);
        }
        
        public int GetWonMatchesCount(TennisOrganizerServices.Player player) {
            return base.Channel.GetWonMatchesCount(player);
        }
        
        public System.Threading.Tasks.Task<int> GetWonMatchesCountAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetWonMatchesCountAsync(player);
        }
        
        public int GetLostMatchesCount(TennisOrganizerServices.Player player) {
            return base.Channel.GetLostMatchesCount(player);
        }
        
        public System.Threading.Tasks.Task<int> GetLostMatchesCountAsync(TennisOrganizerServices.Player player) {
            return base.Channel.GetLostMatchesCountAsync(player);
        }
    }
}
